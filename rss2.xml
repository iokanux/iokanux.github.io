<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Chonu</title>
    <link>http://iokanux.com/</link>
    
    <atom:link href="http://iokanux.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Waiting You</description>
    <pubDate>Sat, 08 Feb 2025 12:58:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title></title>
      <link>http://iokanux.com/2025/02/08/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/2025%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55(%E6%97%A0F,G,H,K)/</link>
      <guid>http://iokanux.com/2025/02/08/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/2025%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55(%E6%97%A0F,G,H,K)/</guid>
      <pubDate>Sat, 08 Feb 2025 12:58:57 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;2025牛客寒假算法基础集训营5-无F-G-H-K&quot;&gt;&lt;a href=&quot;#2025牛客寒假算法基础集训营5-无F-G-H-K&quot; class=&quot;headerlink&quot; title=&quot;2025牛客寒假算法基础集训营5(无F,G,H,K)&quot;&gt;&lt;/a&gt;2025牛客寒假算法</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="2025牛客寒假算法基础集训营5-无F-G-H-K"><a href="#2025牛客寒假算法基础集训营5-无F-G-H-K" class="headerlink" title="2025牛客寒假算法基础集训营5(无F,G,H,K)"></a>2025牛客寒假算法基础集训营5(无F,G,H,K)</h1><p>打的晕晕的</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>减法时注意数据范围</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     <span class="type">char</span> c;cin&gt;&gt;c;</span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n<span class="number">-1</span>;</span><br><span class="line">     &#125;        </span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;n*<span class="number">2</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>注意限制间隔</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> n,k,t;cin&gt;&gt;n&gt;&gt;t&gt;&gt;k;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">min</span>(((n-k)/t),k<span class="number">+1</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>贪心，已经合法的位我们不对其进行二次操作，且每个非法位我们操作且<strong>仅执行一次</strong>操作，无论是对a执行还是对b执行</p><p>注意到四种非法情况</p><p>a&#x3D;0,b&#x3D;0,c&#x3D;1;</p><p>a&#x3D;0,b&#x3D;1,c&#x3D;0;</p><p>a&#x3D;1,b&#x3D;0,c&#x3D;0;</p><p>a&#x3D;1,b&#x3D;1,c&#x3D;1;</p><p>每两种情况都可以通过交换操作使得两个非法位合法，无非是交换a&#x2F;b的区别；</p><p>所以思路就是，最大化两两配对四种非法位，自身不能和自身配对</p><p>配对过程就是很典的思路：当最大值大于剩下的所有数，非配对数为最大值-其他所有数之和；否则非配对数为所有数字之和为偶数?0:1</p><p>ans&#x3D;min(全用反置操作，配对数$\times$y+非配对数$\times$x)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n,x,y,ans=<span class="number">0</span>;cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line">     string s1,s2,s3;cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3;</span><br><span class="line">     <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">     vector&lt;<span class="type">int</span>&gt;<span class="built_in">v</span>(<span class="number">4</span>);</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((s1[i]-<span class="string">&#x27;0&#x27;</span>)^(s2[i]-<span class="string">&#x27;0&#x27;</span>)!=(s3[i]-<span class="string">&#x27;0&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;s2[i]==<span class="string">&#x27;0&#x27;</span>) v[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(s1[i]==<span class="string">&#x27;1&#x27;</span>&amp;&amp;s2[i]==<span class="string">&#x27;1&#x27;</span>) v[<span class="number">1</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(s1[i]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;s2[i]==<span class="string">&#x27;1&#x27;</span>) v[<span class="number">2</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(s1[i]==<span class="string">&#x27;1&#x27;</span>&amp;&amp;s2[i]==<span class="string">&#x27;0&#x27;</span>) v[<span class="number">3</span>]++;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125; </span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(v[<span class="number">3</span>]&gt;v[<span class="number">0</span>]+v[<span class="number">1</span>]+v[<span class="number">2</span>])&#123;</span><br><span class="line">      ans=(v[<span class="number">3</span>]-v[<span class="number">1</span>]-v[<span class="number">2</span>]-v[<span class="number">0</span>])*x+(v[<span class="number">1</span>]+v[<span class="number">2</span>]+v[<span class="number">0</span>])*y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="type">int</span> sum=(v[<span class="number">0</span>]+v[<span class="number">1</span>]+v[<span class="number">2</span>]+v[<span class="number">3</span>]);</span><br><span class="line">      ans=(sum%<span class="number">2</span>)*x+(sum-(sum%<span class="number">2</span>))/<span class="number">2</span>*y;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">min</span>(ans,x*pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>贪心的想，我们构造字符串一定是某段中为连续的0和连续的1，前面一段的字符串如果为11…00，那么下一段字符串就应该是从0开始，即0…01…1，两段拼接起来并删除重复串后为101，也就是说这样每一段最多只会贡献1</p><p>考虑什么时候执行区间反置操作，当前一段的字符串为01时，若下一段全是1则该段对答案没有贡献，也就是说当该段全是0时，我们执行区间反置操作；同理，前一段是10时，下一段全是1，我们执行反置操作</p><p>用前缀和维护，调和级数复杂度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     string s;cin&gt;&gt;s;</span><br><span class="line">     s=<span class="string">&quot; &quot;</span>+s;</span><br><span class="line">     <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">     vector&lt;<span class="type">int</span>&gt;<span class="built_in">pre</span>(n<span class="number">+1</span>,<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]+(s[i]==<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">     &#125;        </span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">        <span class="type">int</span> tem=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=k;j&lt;=n;j+=k)&#123;</span><br><span class="line">            <span class="type">int</span> cnt0=pre[j]-pre[j-k],cnt1=k-cnt0;</span><br><span class="line">            <span class="keyword">if</span>(cnt0!=<span class="number">0</span>&amp;&amp;cnt1!=<span class="number">0</span>) tem++;</span><br><span class="line">            <span class="keyword">if</span>(j+k&gt;n)&#123;</span><br><span class="line">                cnt0=pre[n]-pre[j],cnt1=n-j-cnt0;</span><br><span class="line">                <span class="keyword">if</span>(cnt0!=<span class="number">0</span>&amp;&amp;cnt1!=<span class="number">0</span>) tem++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans^=(tem<span class="number">+1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>可以想到胜利方式有两种，直接胜利和间接胜利</p><p>直接胜利就是在下两步之后，横&#x2F;竖&#x2F;对角线直接连成三个</p><p>间接胜利就是下两步之后，我们有两行&#x2F;两列&#x2F;一行一列&#x2F;一行一对角&#x2F;一列一对角连成两个且第三个空位没有O阻挡，这样的话无论炸鸡去阻挡哪个，小L都能取得胜利</p><p>我检查间接胜利的方式就是遍历所有可能的组合判断是否符合</p><p>复杂度最高为O(300T)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;<span class="built_in">g</span>(<span class="number">10</span>,<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(<span class="number">10</span>));</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>,2&gt;&gt;pos;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">            cin&gt;&gt;g[i][j];</span><br><span class="line">            <span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;G&#x27;</span>)&#123;</span><br><span class="line">                pos.<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> check1=[&amp;](<span class="type">char</span> c)&#123;</span><br><span class="line">        <span class="keyword">return</span> c==<span class="string">&#x27;G&#x27;</span>||c==<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="keyword">auto</span> check2=[&amp;](<span class="type">char</span> c)&#123;</span><br><span class="line">        <span class="keyword">return</span> c==<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> ok=<span class="number">0</span>;             </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="built_in">check1</span>(g[i][<span class="number">1</span>])+<span class="built_in">check1</span>(g[i][<span class="number">2</span>])+<span class="built_in">check1</span>(g[i][<span class="number">3</span>]);</span><br><span class="line">        <span class="type">int</span> num11=<span class="built_in">check2</span>(g[i][<span class="number">1</span>])+<span class="built_in">check2</span>(g[i][<span class="number">2</span>])+<span class="built_in">check2</span>(g[i][<span class="number">3</span>]);</span><br><span class="line">        <span class="type">int</span> num2=<span class="built_in">check1</span>(g[<span class="number">1</span>][i])+<span class="built_in">check1</span>(g[<span class="number">2</span>][i])+<span class="built_in">check1</span>(g[<span class="number">3</span>][i]);</span><br><span class="line">        <span class="type">int</span> num22=<span class="built_in">check2</span>(g[<span class="number">1</span>][i])+<span class="built_in">check2</span>(g[<span class="number">2</span>][i])+<span class="built_in">check2</span>(g[<span class="number">3</span>][i]);</span><br><span class="line">        <span class="keyword">if</span>((num11&gt;=<span class="number">1</span>&amp;&amp;num1==<span class="number">3</span>)||(num22&gt;=<span class="number">1</span>&amp;&amp;num2==<span class="number">3</span>)) ok=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num1=<span class="built_in">check1</span>(g[<span class="number">1</span>][<span class="number">1</span>])+<span class="built_in">check1</span>(g[<span class="number">2</span>][<span class="number">2</span>])+<span class="built_in">check1</span>(g[<span class="number">3</span>][<span class="number">3</span>]);</span><br><span class="line">    <span class="type">int</span> num11=<span class="built_in">check2</span>(g[<span class="number">1</span>][<span class="number">1</span>])+<span class="built_in">check2</span>(g[<span class="number">2</span>][<span class="number">2</span>])+<span class="built_in">check2</span>(g[<span class="number">3</span>][<span class="number">3</span>]);</span><br><span class="line">    <span class="type">int</span> num2=<span class="built_in">check1</span>(g[<span class="number">1</span>][<span class="number">3</span>])+<span class="built_in">check1</span>(g[<span class="number">2</span>][<span class="number">2</span>])+<span class="built_in">check1</span>(g[<span class="number">3</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> num22=<span class="built_in">check2</span>(g[<span class="number">1</span>][<span class="number">3</span>])+<span class="built_in">check2</span>(g[<span class="number">2</span>][<span class="number">2</span>])+<span class="built_in">check2</span>(g[<span class="number">3</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>((num1==<span class="number">3</span>&amp;&amp;num11&gt;=<span class="number">1</span>)||(num2==<span class="number">3</span>&amp;&amp;num22&gt;=<span class="number">1</span>)) ok=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:pos)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j:pos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i[<span class="number">0</span>]==j[<span class="number">0</span>]&amp;&amp;i[<span class="number">1</span>]==j[<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            g[i[<span class="number">0</span>]][i[<span class="number">1</span>]]=<span class="string">&#x27;X&#x27;</span>;g[j[<span class="number">0</span>]][j[<span class="number">1</span>]]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> op=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">3</span>;x++)&#123;  </span><br><span class="line">                <span class="type">int</span> num1=<span class="built_in">check1</span>(g[x][<span class="number">1</span>])+<span class="built_in">check1</span>(g[x][<span class="number">2</span>])+<span class="built_in">check1</span>(g[x][<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">if</span>(num1==<span class="number">3</span>) op++;</span><br><span class="line">                <span class="type">int</span> num2=<span class="built_in">check1</span>(g[<span class="number">1</span>][x])+<span class="built_in">check1</span>(g[<span class="number">2</span>][x])+<span class="built_in">check1</span>(g[<span class="number">3</span>][x]);</span><br><span class="line">                <span class="keyword">if</span>(num2==<span class="number">3</span>) op++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> num11=<span class="built_in">check1</span>(g[<span class="number">1</span>][<span class="number">1</span>])+<span class="built_in">check1</span>(g[<span class="number">2</span>][<span class="number">2</span>])+<span class="built_in">check1</span>(g[<span class="number">3</span>][<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">if</span>(num11==<span class="number">3</span>) op++;</span><br><span class="line">            <span class="type">int</span> num22=<span class="built_in">check1</span>(g[<span class="number">1</span>][<span class="number">3</span>])+<span class="built_in">check1</span>(g[<span class="number">2</span>][<span class="number">2</span>])+<span class="built_in">check1</span>(g[<span class="number">3</span>][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(num22==<span class="number">3</span>) op++;</span><br><span class="line">            <span class="keyword">if</span>(op&gt;=<span class="number">2</span>) ok=<span class="number">1</span>;</span><br><span class="line">            g[i[<span class="number">0</span>]][i[<span class="number">1</span>]]=<span class="string">&#x27;G&#x27;</span>;g[j[<span class="number">0</span>]][j[<span class="number">1</span>]]=<span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(ok?<span class="string">&quot;Yes\n&quot;</span>:<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p>想复杂了，最后结论就是除非n为0，通过若干次两种操作组合可以操作出来任何数</p><p>应该是可以证出来的，这里放个伪证明</p><p>给定一个目标m&gt;&#x3D;1，我们只需要使得n最终的值在$[m^2,(m+1)^{2})$之间即可通过开方得到m，这中间有2m+1个数字，在m&lt;&#x3D;1e9时，任何2m+1个连续数字之间一定存在2的幂次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,ok=<span class="number">0</span>;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>||n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==m)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><p>没啥说的，模拟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     string s;cin&gt;&gt;s;</span><br><span class="line">     <span class="type">int</span> v=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">auto</span> i:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            v+=<span class="number">10</span>;</span><br><span class="line">            ans+=v;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            v-=<span class="number">5</span>;v=<span class="built_in">max</span>(v,<span class="number">0LL</span>);</span><br><span class="line">            ans+=v;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=<span class="built_in">max</span>(v<span class="number">-10</span>,<span class="number">0LL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;        </span><br><span class="line">     cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><p>构造题，可以很贪心的想到答案除了n&#x3D;&#x3D;3之外就是n&#x2F;3</p><p>想到互质，联想两个连续的数一定互质，自然的想到构造多组连续的三元组，即</p><p>1 2 3</p><p>4 5 6</p><p>7 8 9</p><p>10 11 12</p><p>可以观察到有的符合题意，有的不符合（每个三元组是三对质数），要想方法缩减质数的对数</p><p>可以发现每两个数就会出现一个偶数，每三个数就会出现一个整除3的数，无论是两个偶数&#x2F;两个是3的倍数的数都会使得质数的对数-1，初步构造方法如下</p><p>x        x+1          x+1+2</p><p>x+2    x+2+2     x+2+2+1</p><p>即1 2 4</p><p>​    3 5 6</p><p>这样每行都能出现两个偶数&#x2F;两个3的倍数，缺点就是当n%3&#x3D;&#x3D;0且为奇数的时候，右下角的数&#x3D;&#x3D;n+1，即</p><p>1 2 4</p><p>3 5 6</p><p>7 8 10</p><p>考虑将10调整为9的方法即可，swap（6，10）可以轻松的满足条件，构造完成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n/<span class="number">3</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>((n/<span class="number">3</span>)*<span class="number">3</span>==n)&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">a</span>(n<span class="number">+1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">4</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                a[i][<span class="number">1</span>]=(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+1</span>;a[i][<span class="number">2</span>]=(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+2</span>;a[i][<span class="number">3</span>]=(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+4</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                a[i][<span class="number">1</span>]=(i<span class="number">-1</span>)*<span class="number">3</span>;a[i][<span class="number">2</span>]=(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+2</span>;a[i][<span class="number">3</span>]=(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[n/<span class="number">3</span>][<span class="number">3</span>]=n;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="built_in">swap</span>(a[n/<span class="number">3</span>][<span class="number">3</span>],a[n/<span class="number">3</span><span class="number">-1</span>][<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">3</span>;i++)&#123;</span><br><span class="line">            cout&lt;&lt;a[i][<span class="number">1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[i][<span class="number">2</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[i][<span class="number">3</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>) cout&lt;&lt;(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+2</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+4</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;(i<span class="number">-1</span>)*<span class="number">3</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+2</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(i<span class="number">-1</span>)*<span class="number">3</span><span class="number">+3</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://iokanux.com/2025/02/08/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/2025%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55(%E6%97%A0F,G,H,K)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://iokanux.com/2025/02/04/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9BRound%2079(A-F)/</link>
      <guid>http://iokanux.com/2025/02/04/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9BRound%2079(A-F)/</guid>
      <pubDate>Mon, 03 Feb 2025 17:45:31 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;牛客周赛Round-79-A-F&quot;&gt;&lt;a href=&quot;#牛客周赛Round-79-A-F&quot; class=&quot;headerlink&quot; title=&quot;牛客周赛Round 79(A-F)&quot;&gt;&lt;/a&gt;牛客周赛Round 79(A-F)&lt;/h1&gt;&lt;h2 id=&quot;A&quot;&gt;&lt;a h</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="牛客周赛Round-79-A-F"><a href="#牛客周赛Round-79-A-F" class="headerlink" title="牛客周赛Round 79(A-F)"></a>牛客周赛Round 79(A-F)</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>除1外的n*2必不为质数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     cout&lt;&lt;(n==<span class="number">1</span>?<span class="number">-1</span>:n*<span class="number">2</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     <span class="type">int</span> mx=n/<span class="number">2</span>,mn=(n<span class="number">+1</span>)/<span class="number">3</span>;</span><br><span class="line">     cout&lt;&lt;mn&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">pre</span>(<span class="number">100000</span>);</span><br><span class="line">    pre[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="built_in">power</span>(<span class="number">2</span>,i<span class="number">-1</span>,mod);</span><br><span class="line">        pre[i]=(pre[i<span class="number">-1</span>]+cnt+(cnt*<span class="built_in">power</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod))%mod)%mod;</span><br><span class="line">    &#125;             </span><br><span class="line">    cout&lt;&lt;pre[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://iokanux.com/2025/02/04/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9BRound%2079(A-F)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://iokanux.com/2025/02/03/XCPC/codeforces/Codeforces%20Round%201002%20(Div.%202%EF%BC%8CA-C)/</link>
      <guid>http://iokanux.com/2025/02/03/XCPC/codeforces/Codeforces%20Round%201002%20(Div.%202%EF%BC%8CA-C)/</guid>
      <pubDate>Sun, 02 Feb 2025 17:41:53 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Codeforces-Round-1002-Div-2，A-C&quot;&gt;&lt;a href=&quot;#Codeforces-Round-1002-Div-2，A-C&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Round 1002 (Div. 2，</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Codeforces-Round-1002-Div-2，A-C"><a href="#Codeforces-Round-1002-Div-2，A-C" class="headerlink" title="Codeforces Round 1002 (Div. 2，A-C)"></a>Codeforces Round 1002 (Div. 2，A-C)</h1><p>想了一下，我觉得个人赛的一个基本流程大致是这样的</p><ol><li>认真的读一遍题，如果有，<strong>一定</strong>要看样例的解释，最后模拟样例</li><li>从问题的性质出发，包括但不限于复杂度，题目与数据的限制，<strong>重新读题</strong>，将问题转化为子问题。如果一个hint都没有，建议重复步骤1，如果卡这超过10分钟，建议切题</li><li>给出相应的解决方法，<strong>一定要思考可做性</strong>，可以参考过题人数与速度，同时思考一下代码的实现难易程度，在这里卡超过10分钟，也建议重新读题&#x2F;切题</li></ol><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>GuessForces</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n),<span class="built_in">b</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>());             </span><br><span class="line">    set&lt;<span class="type">int</span>&gt;st;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v1,v2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st.<span class="built_in">count</span>(a[i]+b[i])) st.<span class="built_in">insert</span>(a[i]+b[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            v<span class="number">1.</span><span class="built_in">push_back</span>(a[i]);</span><br><span class="line">            v<span class="number">2.</span><span class="built_in">push_back</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v<span class="number">1.</span><span class="built_in">begin</span>(),v<span class="number">1.</span><span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(v<span class="number">2.</span><span class="built_in">begin</span>(),v<span class="number">2.</span><span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v<span class="number">1.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        st.<span class="built_in">insert</span>(v1[i]+v2[i]);    </span><br><span class="line">    &#125;   </span><br><span class="line">    cout&lt;&lt;(st.<span class="built_in">size</span>()&gt;=<span class="number">3</span>?<span class="string">&quot;YES\n&quot;</span>:<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>贪心的想，越长的串出现非i数一定越多</p><p>如果恰好填满(即k&#x3D;&#x3D;n),只能按部就班的模拟</p><p>否则我们使得前2个子数组尽可能长(即让后k-2个子数组每个只包含一个数字)，遍历前[2,n-(k-2)]的数组，容易发现一旦a[i]!&#x3D;1，我们就将其作为第二段子数组的起点，此时答案为1</p><p>否则只能是该段数组都只包含1，此时将a[1]作为第一段子数组，第二段子数组将包含&gt;1个数的1(因为此时n&gt;k)，此时答案为2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k,cnt=<span class="number">1</span>;cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n<span class="number">+1</span>),st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k==n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) st.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:st)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=cnt)&#123;</span><br><span class="line">                cout&lt;&lt;cnt&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n-(k<span class="number">-2</span>);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://iokanux.com/2025/02/03/XCPC/codeforces/Codeforces%20Round%201002%20(Div.%202%EF%BC%8CA-C)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Codeforces Round 1000 (Div2,A-D)</title>
      <link>http://iokanux.com/2025/01/23/XCPC/codeforces/Codeforces%20Round%201000%20(Div2,A-C)/</link>
      <guid>http://iokanux.com/2025/01/23/XCPC/codeforces/Codeforces%20Round%201000%20(Div2,A-C)/</guid>
      <pubDate>Thu, 23 Jan 2025 14:53:25 GMT</pubDate>
      
      <description>&lt;p&gt;E题明天补一下&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>E题明天补一下</p><span id="more"></span><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>看样例就懂了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a!=b) cout&lt;&lt;b-a&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>) cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>可以发现我们想要换取[l,r]的某几个数，一定是只能从[1,l-1]或者[r+1,n]中的某一个里选</p><p>因为如果两段都存在数的话，由于反转的对称性，最左边的数和最右边的数交换，以此类推，所以一定会使得某个区间的数在和[l,r]区间内的数交换之前被另一个区间消耗掉</p><p>贪心的考虑区间和，选择[l,r]内最大的几个数和两端最小的几个数交换</p><p>容易用优先队列实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,l,r;cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt;lmn,rmn;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=l&amp;&amp;i&lt;=r)&#123;</span><br><span class="line">            ans+=x;</span><br><span class="line">            a.<span class="built_in">push</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;l) lmn.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">else</span> rmn.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> work=[&amp;](<span class="type">char</span> c)&#123;</span><br><span class="line">        <span class="keyword">auto</span> pq=lmn;<span class="keyword">auto</span> a1=a;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;l&#x27;</span>) pq=lmn;</span><br><span class="line">        <span class="keyword">else</span> pq=rmn;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a<span class="number">1.</span><span class="built_in">size</span>()&amp;&amp;pq.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> t1=a<span class="number">1.</span><span class="built_in">top</span>();a<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">auto</span> t2=pq.<span class="built_in">top</span>();pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(t1&gt;t2)&#123;</span><br><span class="line">                res+=t1-t2;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;; </span><br><span class="line">    cout&lt;&lt;ans-<span class="built_in">max</span>(<span class="built_in">work</span>(<span class="string">&#x27;l&#x27;</span>),<span class="built_in">work</span>(<span class="string">&#x27;r&#x27;</span>))&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>思路很简单，选择度数最大的两个点然后删除他们</p><p>对于一棵树中的任意一个点来说，每删除它的一条边都会使得图中的连通分量+1</p><p>但是本题要求删边之后将点也删去,这会使得连通分量-1，即每删除一个点，会<strong>增加</strong>度数-1的连通分量数</p><p>正常的思路就是选择度数最大的两个点删去</p><p>唯一问题是当最大的度数的点不唯一时，是有限制的</p><p>当三个度数最大的点相连时，此时删去中间的点会使得两边度数最大的点度数都-1,即会使得答案变差,此时应该避开中间点</p><p>解决方法就是选取任意两个点数最大的点（此时必有一个点为最优解的点），对他们相连的边依次度数-1后取最大值</p><p>最终答案就是两个点度数和-2+最开始的联通量(1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;de1;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">g</span>(n<span class="number">+1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">in</span>(n<span class="number">+1</span>);</span><br><span class="line">    priority_queue&lt;array&lt;<span class="type">int</span>,2&gt;&gt;pq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        in[u]++;in[v]++;</span><br><span class="line">    &#125;             </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;in[i],i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> t=pq.<span class="built_in">top</span>();</span><br><span class="line">    de<span class="number">1.</span><span class="built_in">push_back</span>(t[<span class="number">1</span>]);</span><br><span class="line">    pq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(pq.<span class="built_in">top</span>()[<span class="number">0</span>]==t[<span class="number">0</span>])&#123;</span><br><span class="line">        de<span class="number">1.</span><span class="built_in">push_back</span>(pq.<span class="built_in">top</span>()[<span class="number">1</span>]);</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:de1)&#123;</span><br><span class="line">        <span class="type">int</span> res=in[i];</span><br><span class="line">        <span class="keyword">auto</span> in1=in;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j:g[i])&#123;</span><br><span class="line">            in1[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;array&lt;<span class="type">int</span>,2&gt;&gt;pq1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=j) pq<span class="number">1.</span><span class="built_in">push</span>(&#123;in1[j],j&#125;);</span><br><span class="line">        &#125;    </span><br><span class="line">        res+=pq<span class="number">1.</span><span class="built_in">top</span>()[<span class="number">0</span>]; </span><br><span class="line">        ans=<span class="built_in">max</span>(ans,res<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>固定根节点，从叶子节点向上推，且递推到父节点u并操作之后，我们保证u和他的所有子树的值都相同</p><p>因为求最小的最终值，所以递归到根节点i且根节点的值选择l[i]</p><p>每次修改节点u，以</p><p>每次向上递推父节点，若父节点大于子树最大值就跳过(此时父节点)</p>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/Codeforces/">Codeforces</category>
      
      
      
      <comments>http://iokanux.com/2025/01/23/XCPC/codeforces/Codeforces%20Round%201000%20(Div2,A-C)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://iokanux.com/2025/01/21/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/2025%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/</link>
      <guid>http://iokanux.com/2025/01/21/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/2025%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/</guid>
      <pubDate>Tue, 21 Jan 2025 11:24:11 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;2025牛客寒假算法基础集训营1&quot;&gt;&lt;a href=&quot;#2025牛客寒假算法基础集训营1&quot; class=&quot;headerlink&quot; title=&quot;2025牛客寒假算法基础集训营1&quot;&gt;&lt;/a&gt;2025牛客寒假算法基础集训营1&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="2025牛客寒假算法基础集训营1"><a href="#2025牛客寒假算法基础集训营1" class="headerlink" title="2025牛客寒假算法基础集训营1"></a>2025牛客寒假算法基础集训营1</h1><span id="more"></span><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> ok=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>) ok=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ok) cout&lt;&lt;<span class="number">999999999999999989</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">g</span>(n<span class="number">+1</span>);</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">     &#125;  </span><br><span class="line">     vector&lt;<span class="type">int</span>&gt;ans;      </span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(g[i].<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(ans.<span class="built_in">size</span>()!=<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;ans[<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">-1</span>,b=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        mp[x]++;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">-1</span>) a=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="number">-1</span>&amp;&amp;x!=a) b=x;</span><br><span class="line">    &#125;           </span><br><span class="line">    cout&lt;&lt;((n%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;mp.<span class="built_in">size</span>()==<span class="number">2</span>&amp;&amp;mp[a]==mp[b])?<span class="string">&quot;Yes\n&quot;</span>:<span class="string">&quot;No\n&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>好像挺典的,+1-1最小次数操作使得数组相等,就选中位数</p><p>所以选前半段中位数和后半段中位数，为了特判必须要为两个不同的数，在mid的基础上+-1</p><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n),p,need;</span><br><span class="line">     <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">     map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        mp[a[i]]++;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=<span class="number">0</span>||a[i]&gt;n)&#123;</span><br><span class="line">            p.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">1</span>&amp;&amp;a[i]&lt;=n&amp;&amp;mp[a[i]]==<span class="number">2</span>)&#123;</span><br><span class="line">            mp[a[i]]--;</span><br><span class="line">            p.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            need.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(sum!=(n<span class="number">+1</span>)*n/<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(need.<span class="built_in">begin</span>(),need.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            mx+=<span class="built_in">abs</span>(p[i]-need[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;(mx<span class="number">+1</span>)/<span class="number">2</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><p>对于[1,n]的每一个点i,都必须找到某个区间[l,r]，其中l&lt;&#x3D;i&lt;&#x3D;r</p><p>如果有多个区间满足,贪心思想就是找到一个一定不会使得答案变差的方法</p><p>每次遍历到点i时,我们将所有&lt;&#x3D;i的左端点都入队，选取其中最小的右端点，这样一定不会使得答案变差</p><p>因为如果所有待选的r都不同,下一个点一定还有的选；若存在相同r，i&lt;r下一个数还是有解，i&#x3D;&#x3D;r此时产生空选项,无答案,无论哪一种情况都不会使得答案变差</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>,2&gt;&gt;<span class="built_in">a</span>(n<span class="number">+1</span>);</span><br><span class="line">    vector&lt;vector&lt;array&lt;<span class="type">int</span>,2&gt;&gt;&gt;<span class="built_in">g</span>(n<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i][<span class="number">0</span>]&gt;&gt;a[i][<span class="number">1</span>];</span><br><span class="line">        g[a[i][<span class="number">0</span>]].<span class="built_in">push_back</span>(&#123;a[i][<span class="number">1</span>],i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">p</span>(n<span class="number">+1</span>,<span class="number">0</span>);</span><br><span class="line">    priority_queue&lt;array&lt;<span class="type">int</span>,2&gt;,vector&lt;array&lt;<span class="type">int</span>,2&gt;&gt;,greater&lt;array&lt;<span class="type">int</span>,2&gt;&gt;&gt;pq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> [x,y]:g[i])&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pq.<span class="built_in">empty</span>()||pq.<span class="built_in">top</span>()[<span class="number">0</span>]&lt;i)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p[pq.<span class="built_in">top</span>()[<span class="number">1</span>]]=i;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;p[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><p>A和任意数的gcd一定在A的因子中</p><p>$a_i{XOR}a_j&#x3D;gcd(a_i,a_j)$，等价于$a_j&#x3D;gcd(a_i,a_j)XORa_i$</p><p>我们枚举数组a,同时枚举a的所有因子,如果因子XOR$a_i$存在的话,等价于$a_j$存在</p><p>为了避免重复,我们要求$a_i&gt;a_j$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        mp[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j*j&lt;=a[i];j++)&#123;</span><br><span class="line">            <span class="type">int</span> x=j^a[i];</span><br><span class="line">            <span class="keyword">if</span>(a[i]%j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;a[i]&amp;&amp;<span class="built_in">gcd</span>(x,a[i])==j) ans+=mp[x];</span><br><span class="line">            <span class="keyword">if</span>(j*j!=a[i])&#123;</span><br><span class="line">                x=(a[i]/j)^a[i];</span><br><span class="line">                <span class="keyword">if</span>(x&gt;a[i]&amp;&amp;<span class="built_in">gcd</span>(x,a[i])==a[i]/j) ans+=mp[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2>]]></content:encoded>
      
      
      
      
      <comments>http://iokanux.com/2025/01/21/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/2025%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://iokanux.com/2025/01/21/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9B77/</link>
      <guid>http://iokanux.com/2025/01/21/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9B77/</guid>
      <pubDate>Mon, 20 Jan 2025 16:49:59 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;牛客周赛77-E-F&quot;&gt;&lt;a href=&quot;#牛客周赛77-E-F&quot; class=&quot;headerlink&quot; title=&quot;牛客周赛77(E,F)&quot;&gt;&lt;/a&gt;牛客周赛77(E,F)&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="牛客周赛77-E-F"><a href="#牛客周赛77-E-F" class="headerlink" title="牛客周赛77(E,F)"></a>牛客周赛77(E,F)</h1><span id="more"></span><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2>]]></content:encoded>
      
      
      
      
      <comments>http://iokanux.com/2025/01/21/XCPC/%E7%89%9B%E5%AE%A2%E7%B3%BB%E5%88%97%E8%B5%9B/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9B77/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://iokanux.com/2024/11/15/XCPC/XCPC%E6%A8%A1%E6%9D%BF/XCPC/XCPC%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <guid>http://iokanux.com/2024/11/15/XCPC/XCPC%E6%A8%A1%E6%9D%BF/XCPC/XCPC%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <pubDate>Fri, 15 Nov 2024 06:03:16 GMT</pubDate>
      
        
        
      <description>&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Manacher&quot;&gt;&lt;a href=&quot;#Manacher&quot; class=&quot;headerlink&quot; title=&quot;Manacher&quot;&gt;&lt;/a&gt;Manacher&lt;/h1&gt;&lt;p&gt;能在O(N)的时间内求出以每个位置为回文中心的回文半径&lt;/p&gt;
&lt;fig</description>
        
      
      
      
      <content:encoded><![CDATA[<hr><hr><h1 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h1><p>能在O(N)的时间内求出以每个位置为回文中心的回文半径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">manacher</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    string t = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        t += c;</span><br><span class="line">        t += <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * j - i &gt;= <span class="number">0</span> &amp;&amp; j + r[j] &gt; i) &#123;</span><br><span class="line">            r[i] = <span class="built_in">min</span>(r[<span class="number">2</span> * j - i], j + r[j] - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i - r[i] &gt;= <span class="number">0</span> &amp;&amp; i + r[i] &lt; n &amp;&amp; t[i - r[i]] == t[i + r[i]]) &#123;</span><br><span class="line">            r[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + r[i] &gt; j + r[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">auto</span> r=<span class="built_in">manacher</span>(s);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">2</span> * s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, r[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">kmp</span><span class="params">(std::string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">            j = f[j];</span><br><span class="line">        &#125;</span><br><span class="line">        j += (s[i] == s[j]);</span><br><span class="line">        f[i + <span class="number">1</span>] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Z函数-扩展kmp-exkmp"><a href="#Z函数-扩展kmp-exkmp" class="headerlink" title="Z函数(扩展kmp&#x2F;exkmp)"></a>Z函数(扩展kmp&#x2F;exkmp)</h1><p>能在O(n)的时间范围里找到给定字符串s，对于每个位置i，s整个字符串和$(s[i]-s[n-1])(等价于s.substr(i))$的LCP(最长公共前缀)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">Z</span><span class="params">(std::string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    z[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        z[i] = std::<span class="built_in">max</span>(<span class="number">0</span>, std::<span class="built_in">min</span>(j + z[j] - i, z[i - j]));</span><br><span class="line">        <span class="keyword">while</span> (i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i + z[i]]) &#123;</span><br><span class="line">            z[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + z[i] &gt; j + z[j]) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://iokanux.com/2024/11/15/XCPC/XCPC%E6%A8%A1%E6%9D%BF/XCPC/XCPC%E5%AD%97%E7%AC%A6%E4%B8%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023ICPC合肥</title>
      <link>http://iokanux.com/2024/11/10/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/2023ICPC%E5%90%88%E8%82%A5/</link>
      <guid>http://iokanux.com/2024/11/10/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/2023ICPC%E5%90%88%E8%82%A5/</guid>
      <pubDate>Sun, 10 Nov 2024 11:03:33 GMT</pubDate>
      
      <description>&lt;p&gt;已补E,F,G,J&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>已补E,F,G,J</p><span id="more"></span><p><a href="https://mirror.codeforces.com/gym/104857/problem/F">F - Colorful Balloons</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     <span class="type">int</span> k=n;</span><br><span class="line">     map&lt;string,<span class="type">int</span>&gt;mp;</span><br><span class="line">     <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        string s;cin&gt;&gt;s;</span><br><span class="line">        mp[s]++;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,mp[s]);</span><br><span class="line">     &#125;        </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">auto</span> [s,i]:mp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;k/<span class="number">2</span>)&#123;</span><br><span class="line">            cout&lt;&lt;s&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;uh-oh\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://mirror.codeforces.com/gym/104857/problem/E">E - Matrix Distances</a></p><p>考虑对x和y的贡献分开进行计算</p><p>相同颜色中，排序后的下为i的x的贡献值为</p><p>$\sum_1^i(a[i].first-a[j].first)+\sum_i^{end}(a[j].first-a[i].first)$</p><p>对该式子化简后可得</p><p>$a[i].first*(i-1)-\sum_1^ia[j].first+\sum_i^{end}a[j].first-(end-i)*a[i].first$</p><p>y的贡献同理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">g</span>(n<span class="number">+1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m<span class="number">+1</span>));</span><br><span class="line">    map&lt;<span class="type">int</span>,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt;mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;g[i][j];</span><br><span class="line">            mp[g[i][j]].<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> work=[&amp;]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[x,y]:mp)&#123;</span><br><span class="line">            <span class="built_in">sort</span>(y.<span class="built_in">begin</span>(),y.<span class="built_in">end</span>(),[&amp;](<span class="keyword">auto</span> l,<span class="keyword">auto</span> r)&#123;</span><br><span class="line">                <span class="keyword">return</span> l.first&lt;r.first;</span><br><span class="line">            &#125;);</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt;<span class="built_in">pre</span>(y.<span class="built_in">size</span>()<span class="number">+10</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;y.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                pre[i<span class="number">+1</span>]=pre[i]+y[i].first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=y.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="type">int</span> l=i<span class="number">-1</span>,r=y.<span class="built_in">size</span>()-i;</span><br><span class="line">                ans+=l*y[i<span class="number">-1</span>].first-pre[i<span class="number">-1</span>]+pre[y.<span class="built_in">size</span>()]-pre[i]-r*y[i<span class="number">-1</span>].first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[x,y]:mp)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[x1,y1]:y)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(x1,y1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">work</span>();</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://mirror.codeforces.com/gym/104857/problem/J">J - Takeout Delivering</a></p><p>开始的想法很朴素，正反跑两边dijkstra，求出每个点到点1和点n的最长距离</p><p>然后遍历所有点i，使得两条最长边分别确定在1-i与i-n之间，求出两边之和的最小值</p><p>这样有一个显然的错误就是可能会存在两条最长边在一边的情况，最终使得求出的答案小于正确答案</p><p>为了解决这种情况，我们将点的遍历改为边的遍历，确定该边为这条路径上的最长边，这样次长边一定是在该边的两端的两个顶点分别到点1和点n的距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt;<span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>, 3&gt;&gt;edge;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(&#123; v,w &#125;);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(&#123; u,w &#125;);</span><br><span class="line">        edge.<span class="built_in">push_back</span>(&#123; u,v,w &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">dis1</span>(n + <span class="number">10</span>, <span class="number">1e18</span>), <span class="built_in">dis2</span>(n + <span class="number">10</span>, <span class="number">1e18</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">st1</span>(n + <span class="number">10</span>, <span class="number">0</span>), <span class="built_in">st2</span>(n + <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">auto</span> dig1 = [&amp;](<span class="type">int</span> fi, <span class="type">int</span> se) &#123;</span><br><span class="line">        priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;&gt;&gt;heap;</span><br><span class="line">        heap.<span class="built_in">push</span>(&#123; <span class="number">0</span>, fi &#125;);</span><br><span class="line">        dis1[fi] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [d, u] = heap.<span class="built_in">top</span>();heap.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (st1[u]) <span class="keyword">continue</span>;</span><br><span class="line">            st1[u] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [i, w] : g[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">max</span>(w, dis1[u]) &lt; dis1[i]) &#123;</span><br><span class="line">                    dis1[i] = <span class="built_in">max</span>(w, dis1[u]);</span><br><span class="line">                    heap.<span class="built_in">push</span>(&#123; dis1[i],i &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">auto</span> dig2 = [&amp;](<span class="type">int</span> fi, <span class="type">int</span> se) &#123;</span><br><span class="line">        priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;&gt;&gt;heap;</span><br><span class="line">        heap.<span class="built_in">push</span>(&#123; <span class="number">0</span>, fi &#125;);</span><br><span class="line">        dis2[fi] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [d, u] = heap.<span class="built_in">top</span>();heap.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (st2[u]) <span class="keyword">continue</span>;</span><br><span class="line">            st2[u] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [i, w] : g[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">max</span>(w, dis2[u]) &lt; dis2[i]) &#123;</span><br><span class="line">                    dis2[i] = <span class="built_in">max</span>(w, dis2[u]);</span><br><span class="line">                    heap.<span class="built_in">push</span>(&#123; dis2[i],i &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="built_in">dig1</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">dig2</span>(n, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [u, v, w] = i;</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= dis1[u] &amp;&amp; w &gt;= dis2[v]) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">max</span>(dis1[u], dis2[v]) + w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= dis2[u] &amp;&amp; w &gt;= dis1[v]) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">max</span>(dis2[u], dis1[v]) + w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://mirror.codeforces.com/gym/104857/problem/G">G - Streak Manipulation</a></p><p>看到多项，每项都有选&#x2F;不选求最优解的问题，可以想到dp</p><p>为求第k长的1串长度，可以想到二分，每次在二分里状态转移</p><p>观察到k数字很小</p><p>$dp[i][j][k]$表示前i个字符中有j个1串长度大于等于二分值mid的最小代价，k表示第i个字符是0还是1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n,m,k;cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">     string s;cin&gt;&gt;s;</span><br><span class="line">     s=<span class="string">&quot; &quot;</span>+s;</span><br><span class="line">     vector&lt;<span class="type">int</span>&gt;<span class="built_in">pre</span>(n<span class="number">+1</span>,<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]+(s[i]==<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;<span class="built_in">dp</span>(n<span class="number">+1</span>,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(k<span class="number">+1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">1e9</span>)));</span><br><span class="line">     <span class="keyword">auto</span> check=[&amp;](<span class="type">int</span> x)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=k;j++)&#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>]=<span class="number">1e9</span>;</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=<span class="number">1e9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">         dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=k;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                  dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][<span class="number">1</span>]);</span><br><span class="line">                  <span class="comment">//将该位置0,只能是当前位置是0,此时不用付代价</span></span><br><span class="line">               &#125;                </span><br><span class="line">               dp[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][<span class="number">1</span>])+(s[i]==<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">               <span class="keyword">if</span>(i&gt;=x&amp;&amp;j&gt;=<span class="number">1</span>)&#123; </span><br><span class="line">                   dp[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i-x][j<span class="number">-1</span>][<span class="number">0</span>]+pre[i]-pre[i-x],dp[i][j][<span class="number">1</span>]);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">min</span>(dp[n][k][<span class="number">1</span>],dp[n][k][<span class="number">0</span>])&lt;=m;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="type">int</span> l=<span class="number">-1</span>,r=n<span class="number">+1</span>;</span><br><span class="line">     <span class="keyword">while</span>(l<span class="number">+1</span>!=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">     &#125;        </span><br><span class="line">     <span class="keyword">if</span>(l!=<span class="number">0</span>) cout&lt;&lt;l&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     <span class="keyword">else</span> cout&lt;&lt;l<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/">XCPC系列赛</category>
      
      
      
      <comments>http://iokanux.com/2024/11/10/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/2023ICPC%E5%90%88%E8%82%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2024CCPC哈尔滨</title>
      <link>http://iokanux.com/2024/11/09/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/2024CCPC%E5%93%88%E5%B0%94%E6%BB%A8/</link>
      <guid>http://iokanux.com/2024/11/09/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/2024CCPC%E5%93%88%E5%B0%94%E6%BB%A8/</guid>
      <pubDate>Sat, 09 Nov 2024 11:03:33 GMT</pubDate>
      
      <description>&lt;p&gt;已补C,G,M,K,&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>已补C,G,M,K,</p><span id="more"></span>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/">XCPC系列赛</category>
      
      
      
      <comments>http://iokanux.com/2024/11/09/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/2024CCPC%E5%93%88%E5%B0%94%E6%BB%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>高斯消元</title>
      <link>http://iokanux.com/2024/11/07/XCPC/XCPC%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</link>
      <guid>http://iokanux.com/2024/11/07/XCPC/XCPC%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</guid>
      <pubDate>Thu, 07 Nov 2024 05:40:25 GMT</pubDate>
      
      <description>&lt;p&gt;高斯消元法解线性方程组&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>高斯消元法解线性方程组</p><span id="more"></span><p>高斯消元的目的是将矩阵变为上三角矩阵</p><ol><li><p>选定未被选择过的、xi项系数绝对值最大的一行（这样更加容易判断是否有解），将整个式子除以xi的系数（xi系数化为1）。同时将其交换至第i行（方便求解）</p></li><li><p>将未被选择过的行中的该项全部按照系数相应的减去选定的那行的系数（剩下的其他行xi系数化为0）</p><p>当所有行都选定过时，已经构成了上三角</p></li><li><p>倒序求解，每次将常数减去已经求出的所有项的解，此时可以求出当前项的解（将已知解带入求未知解）最后依次输出即可</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">gao&#x27;si</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">double</span>&gt;&gt;<span class="built_in">g</span>(n<span class="number">+1</span>,<span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(n<span class="number">+2</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n<span class="number">+1</span>;j++)&#123;</span><br><span class="line">            cin&gt;&gt;g[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> Gauss=[&amp;]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> now=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">fabs</span>(g[now][i])&lt;<span class="built_in">fabs</span>(g[j][i]))&#123;</span><br><span class="line">                    now=j;<span class="comment">//找出当前项系数的绝对值的最大值 </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n<span class="number">+1</span>;j++)&#123;<span class="comment">//将其放在对应的行,方便计算</span></span><br><span class="line">                <span class="built_in">swap</span>(g[now][j],g[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(g[i][i]<span class="number">-0.0</span>)&lt;<span class="number">1e-4</span>)&#123;</span><br><span class="line">            <span class="comment">//如果此时绝对值最大系数已经为0           </span></span><br><span class="line">            <span class="comment">//则证明此方程组无解 </span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;No Solution&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//此处写return只是退出函数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n<span class="number">+1</span>;++j)&#123;</span><br><span class="line">            <span class="comment">//将系数化为1 </span></span><br><span class="line">               g[i][j]/=g[i][i];</span><br><span class="line">            &#125;</span><br><span class="line">            g[i][i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="comment">//在其他式子中将此项系数化为0 </span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=i<span class="number">+1</span>;k&lt;=n<span class="number">+1</span>;k++)&#123;</span><br><span class="line">                    g[j][k]-=g[j][i]*g[i][k];</span><br><span class="line">                &#125;</span><br><span class="line">                g[j][i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;    </span><br><span class="line">    <span class="built_in">Gauss</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">    <span class="comment">//倒着求解即可 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">        <span class="comment">//减去后面所有已经求出解的值 </span></span><br><span class="line">            g[i][n<span class="number">+1</span>]-=g[i][j]*g[j][n<span class="number">+1</span>];</span><br><span class="line">            g[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        g[i][n<span class="number">+1</span>]/=g[i][i];   <span class="comment">//只剩下当前的未知量以及常数量（其实没必要除，因为已经是1了） </span></span><br><span class="line">        g[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;g[i][n<span class="number">+1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/">XCPC算法学习</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/">数论</category>
      
      
      
      <comments>http://iokanux.com/2024/11/07/XCPC/XCPC%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
