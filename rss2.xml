<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>iokanux</title>
    <link>http://iokanux.com/</link>
    
    <atom:link href="http://iokanux.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Do something with the world</description>
    <pubDate>Mon, 09 Sep 2024 13:30:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>连通性相关</title>
      <link>http://iokanux.com/2024/09/09/%E8%BF%9E%E9%80%9A%E6%80%A7%E7%9B%B8%E5%85%B3/</link>
      <guid>http://iokanux.com/2024/09/09/%E8%BF%9E%E9%80%9A%E6%80%A7%E7%9B%B8%E5%85%B3/</guid>
      <pubDate>Mon, 09 Sep 2024 06:50:56 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;割点与桥&quot;&gt;&lt;a href=&quot;#割点与桥&quot; class=&quot;headerlink&quot; title=&quot;割点与桥&quot;&gt;&lt;/a&gt;割点与桥&lt;/h2&gt;&lt;h3 id=&quot;割点-cut-vertex-articulation-point）&quot;&gt;&lt;a href=&quot;#割点-cut-verte</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="割点与桥"><a href="#割点与桥" class="headerlink" title="割点与桥"></a>割点与桥</h2><h3 id="割点-cut-vertex-articulation-point）"><a href="#割点-cut-vertex-articulation-point）" class="headerlink" title="割点(cut vertex &#x2F; articulation point）"></a>割点(cut vertex &#x2F; articulation point）</h3><p>给出定义：删除该点后导致图不再连通的点称为割点</p><p>求割点的方法称为tarjan，在连通性相关的问题中广泛运用了该方法</p><p>tarjan的主要思想就是dfn与low数组</p><p>dfn：时间戳数组，dfn[i]称为节点i的dfs序</p><p>dfs序指的是在dfs过程中，该节点是第几个被访问到的节点。dfn数组的值随dfs过程单调上升。</p><p>low[i] 代表节点 i 在不直接返回父亲节点的情况下，通过“绕路”，能够访问到的节点里，最小的dfn值</p><p>由于割点与dfn数组的性质，不返回父亲节点的情况下，其low数组一定不小于dfn数组</p><p>特别的，根节点的判断方法为子节点大于1</p><h2 id="双连通分量-Biconnected-component"><a href="#双连通分量-Biconnected-component" class="headerlink" title="双连通分量 (Biconnected component)"></a>双连通分量 (Biconnected component)</h2><p>由于是双连通图，所以这部分讨论的均为无向图</p><h3 id="边双连通分量-EBC"><a href="#边双连通分量-EBC" class="headerlink" title="边双连通分量 (EBC)"></a>边双连通分量 (EBC)</h3><p>边双是Edge Biconnected Component，所以其实是EBCC，但是为了和割边缩点(EBCC)区别开，这里我们命名为EBC</p><p>给出定义：不存在割边&#x2F;桥的极大双连通子图称为边双连通分量</p><p>所以求边双的方法也很显然，将一张图中的所有割边&#x2F;桥断掉后，剩下的连通块均为一个边双，边双与边双之间以割边&#x2F;桥连接成一棵树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">EBC</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;PII&gt;&gt;adj;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;dfn,low,stk;</span><br><span class="line">    <span class="type">int</span> cur,n;</span><br><span class="line">    <span class="built_in">EBC</span>()&#123;&#125;;</span><br><span class="line">    <span class="built_in">EBC</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">        adj.<span class="built_in">resize</span>(n,&#123;&#125;);</span><br><span class="line">        dfn.<span class="built_in">resize</span>(n,<span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        cur=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(&#123;v,i&lt;&lt;<span class="number">1</span>&#125;);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(&#123;u,i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(u);</span><br><span class="line">        dfn[u]=low[u]=cur++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:adj[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(i.second==(p^<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dfn[i.first]==<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i.first,i.second);</span><br><span class="line">                low[u]=<span class="built_in">min</span>(low[u],low[i.first]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low[u]=<span class="built_in">min</span>(low[u],dfn[i.first]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt;vec;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                y=stk.<span class="built_in">back</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(y);</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">work</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfn[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Employ"><a href="#Employ" class="headerlink" title="Employ"></a>Employ</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">EBC <span class="title">ebc</span><span class="params">(n<span class="number">+1</span>)</span></span>;<span class="comment">//建EBC</span></span><br><span class="line">ebc.<span class="built_in">edge</span>(u,v,i)<span class="comment">//i是for读入数据的i</span></span><br><span class="line"><span class="keyword">auto</span> ans=ebc.<span class="built_in">work</span>()<span class="comment">//ans数组存储每个双连通分量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:ans)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> j:i)&#123;</span><br><span class="line">        <span class="comment">//每个边双的点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点双连通分量-VBC"><a href="#点双连通分量-VBC" class="headerlink" title="点双连通分量(VBC)"></a>点双连通分量(VBC)</h3>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E6%A8%A1%E6%9D%BF/">XCPC模板</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E6%A8%A1%E6%9D%BF/XCPC%E5%9B%BE%E8%AE%BA/">XCPC图论</category>
      
      
      
      <comments>http://iokanux.com/2024/09/09/%E8%BF%9E%E9%80%9A%E6%80%A7%E7%9B%B8%E5%85%B3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XCPC中的时间技巧</title>
      <link>http://iokanux.com/2024/09/08/XCPC%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E6%8A%80%E5%B7%A7/</link>
      <guid>http://iokanux.com/2024/09/08/XCPC%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E6%8A%80%E5%B7%A7/</guid>
      <pubDate>Sun, 08 Sep 2024 07:55:28 GMT</pubDate>
      
      <description>&lt;p&gt;除了时间复杂度,还有什么会影响程序的运行时间&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>除了时间复杂度,还有什么会影响程序的运行时间</p><span id="more"></span><p>本文只来自于自己的做题经验，并没有其他来源，欢迎纠错</p><p>可供验证的题目有</p><ol><li><a href="https://ac.nowcoder.com/acm/contest/7501/A">A-Intelligent Warehouse_2020ICPC·小米 网络选拔赛第一场 (nowcoder.com)</a></li></ol><h2 id="int-与-long-long"><a href="#int-与-long-long" class="headerlink" title="int 与 long long"></a>int 与 long long</h2><p>开long long 会极大增加程序运行的时间,所以建议仔细判断题目是否有开long long的必要,而不是每道题都加#define int long long </p><h2 id="宏定义与替换"><a href="#宏定义与替换" class="headerlink" title="宏定义与替换"></a>宏定义与替换</h2><ol><li><p>宏定义(#define)会增加运行时间</p></li><li><p>替换(typedef&#x2F;const&#x2F;constexpr&#x2F;using)也会增加运行时间</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/Tips/">Tips</category>
      
      
      
      <comments>http://iokanux.com/2024/09/08/XCPC%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E6%8A%80%E5%B7%A7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>时间复杂度</title>
      <link>http://iokanux.com/2024/09/08/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <guid>http://iokanux.com/2024/09/08/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <pubDate>Sun, 08 Sep 2024 07:14:11 GMT</pubDate>
      
      
      
      
      
      <category domain="http://iokanux.com/tags/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/tags/Tips/">Tips</category>
      
      
      <comments>http://iokanux.com/2024/09/08/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ICPC网络赛第一场</title>
      <link>http://iokanux.com/2024/09/08/ICPC%E7%BD%91%E7%BB%9C%E8%B5%9B%E7%AC%AC%E4%B8%80%E5%9C%BA/</link>
      <guid>http://iokanux.com/2024/09/08/ICPC%E7%BD%91%E7%BB%9C%E8%B5%9B%E7%AC%AC%E4%B8%80%E5%9C%BA/</guid>
      <pubDate>Sun, 08 Sep 2024 03:58:33 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;A-Intelligent-Warehouse&quot;&gt;&lt;a href=&quot;#A-Intelligent-Warehouse&quot; class=&quot;headerlink&quot; title=&quot;A  Intelligent Warehouse&quot;&gt;&lt;/a&gt;A  Intelligent W</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="A-Intelligent-Warehouse"><a href="#A-Intelligent-Warehouse" class="headerlink" title="A  Intelligent Warehouse"></a>A  Intelligent Warehouse</h2><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>In <em>MI Intelligent Warehouse</em>, there are $n_{}$ products, where the $i_{}$-th product is of size $a_i$. We always need to box producsts into all kinds of containers, and it will be safer and more cost efficient(效率高的) if for any two sizes of products, one is the other’s multiple, since(因为) there won’t be any residual(残余的) room in one container. So for each boxing we need to choose some products that for any two chosen products, either $a_i$ is multiple of $a_j$ or $a_j$ is multiple of $a_i$. Print the maximum number of products that can be chosen in one boxing.</p><p>在mi智能仓库中，有$n_{}$个产品，其中$i_{}$个产品的尺寸为$a_i$。我们总是需要把产品装进各种各样的容器中，如果任意两个尺寸的产品，一个是另一个的倍数，这样会更安全且成本效益更高，因为一个容器里不会有剩余的空间。因此，对于每次装箱，我们需要选择一些产品，对于任意两个选择的产品，要么是$a_i$是$a_j$的倍数，要么是$a_j$是$a_i$的倍数。打印出在一次装箱中选择的产品的最大数量。</p><h3 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h3><p>目的是选择若干个数字，其中任意两个数均成倍数关系</p><p>考虑最终选定的序列，将其排序后，每个数都必然是最大数的约数，所以其实存在一种递推关系，当$ai$是某个数列的最大数时，将$ai$的倍数加进来，整个数列必然也满足条件</p><p>考虑dp，dp[i]表示以i结尾的最长序列，dp关系式也如上文所说</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e7</span>;</span><br><span class="line"><span class="type">int</span> dp[N<span class="number">+10</span>],mp[N<span class="number">+10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        mp[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[i])&#123;</span><br><span class="line">            dp[i]+=mp[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i*<span class="number">2</span>;j&lt;=N;j+=i)&#123;</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[i],dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Intelligent-Robot"><a href="#B-Intelligent-Robot" class="headerlink" title="B  Intelligent Robot"></a>B  Intelligent Robot</h2><h2 id="C-Smart-Browser"><a href="#C-Smart-Browser" class="headerlink" title="C  Smart Browser"></a>C  Smart Browser</h2><h3 id="Topic-1"><a href="#Topic-1" class="headerlink" title="Topic"></a>Topic</h3><p>In some social platforms(社交平台), there are some netizen(平台) who like to post “<em>www</em>“. Since the string is like the grass(草), which contains plenty of “&#x2F;\“ shapes, so there are also some netizen who post “<em>grass</em>“.  </p><p>As a fast, smart, and convenient browser, <em>MI Browser</em> can recognize this kind of text and show some special effects. Specifically(具体来说), given a string, <em>MI Browser</em> will determine(确定) the number of “&#x2F;\“ shapes made by character “<em>w</em>“, where “<em>w</em>“ itself and the gap(间隙) between two adjacent(相邻的) “<em>w</em>“s both give one `&#x2F;\` shape. If still not clear, please turn to sample input&#x2F;output for more details.  </p><p>As a <em>MI fan</em>, you want to detect(探究) the relationship between the special effects and the number of “&#x2F;\“ shapes, so the thing you should do first is to determine the number of “&#x2F;\“ shapes by yourself.</p><p>在一些社交平台上，有些网民喜欢发布“www”。由于这个字符串看起来很像草，其中包含了许多“&#x2F;\”的形状，因此也有一些网民发布“grass”。</p><p>作为一款快速、智能且便捷的浏览器，MI浏览器能够识别这种文本并展示一些特殊效果。具体来说，给定一个字符串，MI浏览器会确定由字符“w”构成的“&#x2F;\”形状的数量，其中“w”本身以及两个相邻“w”之间的间隙都构成一个“&#x2F;\”形状。如果仍然不清楚，请参考示例输入输出以获取更多详情。</p><p>作为MI浏览器的粉丝，你想要探究这些特殊效果与“&#x2F;\”形状数量之间的关系，因此你首先要做的就是自己确定“&#x2F;\”形状的数量。</p><h3 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h3><p>双指针判断以v分隔开的w的字符数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;w&#x27;</span>)&#123;</span><br><span class="line">            <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(s[i<span class="number">+1</span>]==<span class="string">&#x27;w&#x27;</span>&amp;&amp;i<span class="number">+1</span>&lt;s.<span class="built_in">length</span>())&#123;</span><br><span class="line">                i++;cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=<span class="number">2</span>*cnt<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E7%B3%BB%E5%88%97%E8%B5%9B/">XCPC系列赛</category>
      
      
      
      <comments>http://iokanux.com/2024/09/08/ICPC%E7%BD%91%E7%BB%9C%E8%B5%9B%E7%AC%AC%E4%B8%80%E5%9C%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>对拍</title>
      <link>http://iokanux.com/2024/09/07/%E5%AF%B9%E6%8B%8D/</link>
      <guid>http://iokanux.com/2024/09/07/%E5%AF%B9%E6%8B%8D/</guid>
      <pubDate>Sat, 07 Sep 2024 15:15:41 GMT</pubDate>
      
      <description>&lt;p&gt;介绍Windows环境下与Linux环境下的对拍&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>介绍Windows环境下与Linux环境下的对拍</p><span id="more"></span><h2 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h2><p>以DEV为例，首先建四个源代码到一个新建文件夹中，源代码分别命名为wa.cpp,data.cpp,violent.cpp,windows.cpp,除此之外什么也不需要添加</p><ol><li>一份错误的&#x2F;需要比对的代码，导入wa.cpp</li><li>一份暴力的&#x2F;用来比对的代码，导入violent.cpp</li><li>一份用来造数据的代码</li><li>一份执行对拍程序的代码</li></ol><h3 id="wa-cpp"><a href="#wa-cpp" class="headerlink" title="wa.cpp"></a>wa.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin); <span class="comment">//读入数据生成器造出来的数据</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;wa.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout); <span class="comment">//输出答案</span></span><br><span class="line"><span class="comment">//下方注释为你的程序</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">int a, b;</span></span><br><span class="line"><span class="comment">cin &gt;&gt; a &gt;&gt; b;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; a;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="violent-cpp"><a href="#violent-cpp" class="headerlink" title="violent.cpp"></a>violent.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);      <span class="comment">//读入数据生成器造出来的数据</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;violent.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout); <span class="comment">//输出答案</span></span><br><span class="line"><span class="comment">//下方程序为你已经导入的程序</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">int a, b;</span></span><br><span class="line"><span class="comment">cin &gt;&gt; a &gt;&gt; b;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; a + b;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="data-cpp"><a href="#data-cpp" class="headerlink" title="data.cpp"></a>data.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_timeb</span> T;</span><br><span class="line">_ftime(&amp;T);</span><br><span class="line"><span class="built_in">srand</span>(T.millitm); <span class="comment">//获得毫秒，减小运行时间</span></span><br><span class="line"><span class="type">int</span> a = <span class="built_in">rand</span>(); <span class="comment">//此时a是一个随机数字</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="windows-cpp"><a href="#windows-cpp" class="headerlink" title="windows.cpp"></a>windows.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">//一直循环，直到找到不一样的数据</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;data.exe&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;violent.exe&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;wa.exe&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;fc wa.txt violent.txt&quot;</span>)) <span class="comment">//当 fc 返回 1 时，说明这时数据不一样</span></span><br><span class="line"><span class="keyword">break</span>;                          <span class="comment">//不一样就跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，以上所有程序均需要编译并运行</strong></p><p>当出现不同的结果时候，结果图片如下</p><p><img data-src="/iokanux.com/img/202409072335187.png" alt="image-20240907233526088"></p>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E6%A8%A1%E6%9D%BF/">XCPC模板</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E6%A8%A1%E6%9D%BF/XCPC%E5%9F%BA%E7%A1%80/">XCPC基础</category>
      
      
      
      <comments>http://iokanux.com/2024/09/07/%E5%AF%B9%E6%8B%8D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>高精度</title>
      <link>http://iokanux.com/2024/09/07/%E9%AB%98%E7%B2%BE%E5%BA%A6/</link>
      <guid>http://iokanux.com/2024/09/07/%E9%AB%98%E7%B2%BE%E5%BA%A6/</guid>
      <pubDate>Sat, 07 Sep 2024 14:14:05 GMT</pubDate>
      
      <description>&lt;p&gt;高精度的封装板子&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>高精度的封装板子</p><span id="more"></span><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p>每个操作的时间复杂度均为O(len)，涉及到两个大数参与的操作时为O(max(len1,len2))</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5005</span>;<span class="comment">//位数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bign</span>&#123;</span><br><span class="line">    <span class="type">int</span> len, s[MAXN];</span><br><span class="line">    <span class="built_in">bign</span> ()&#123;  </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bign</span> (<span class="type">int</span> num) &#123; *<span class="keyword">this</span> = num; &#125;</span><br><span class="line">    <span class="built_in">bign</span> (<span class="type">const</span> <span class="type">char</span> *num) &#123; *<span class="keyword">this</span> = num; &#125;  <span class="comment">//让this指针指向当前字符串</span></span><br><span class="line">    bign <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">int</span> num)&#123;</span><br><span class="line">        <span class="type">char</span> s[MAXN];</span><br><span class="line">        <span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, num);  <span class="comment">//sprintf函数将整型映到字符串中</span></span><br><span class="line">        *<span class="keyword">this</span> = s;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">//再将字符串转到下面字符串转化的函数中</span></span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span> *num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; num[i] == <span class="string">&#x27;0&#x27;</span>; num++) ;  <span class="comment">//去前导0</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) s[i] = num[len-i<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">//反着存</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> + (<span class="type">const</span> bign &amp;b) <span class="type">const</span>&#123; </span><br><span class="line">    <span class="comment">//对应位相加，最为简单</span></span><br><span class="line">        bign c;</span><br><span class="line">        c.len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, g = <span class="number">0</span>; g || i &lt; <span class="built_in">max</span>(len, b.len); i++)&#123;</span><br><span class="line">            <span class="type">int</span> x = g;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len) x += s[i];</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.len) x += b.s[i];</span><br><span class="line">            c.s[c.len++] = x % <span class="number">10</span>;  <span class="comment">//关于加法进位</span></span><br><span class="line">            g = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> += (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="comment">//如上文所说，此类运算符皆如此重载</span></span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="comment">//由于接下来的运算不能确定结果的长度，先大而估之然后再查</span></span><br><span class="line">        <span class="keyword">while</span>(len &gt; <span class="number">1</span> &amp;&amp; !s[len<span class="number">-1</span>]) len--;  <span class="comment">//首位部分‘0’故删除该部分长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> * (<span class="type">const</span> bign &amp;b)&#123; </span><br><span class="line">    <span class="comment">//乘法重载在于列竖式，再将竖式中的数转为抽象，即可看出运算法则。</span></span><br><span class="line">        bign c;</span><br><span class="line">        c.len = len + b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.len; j++)&#123;</span><br><span class="line">                c.s[i+j] += s[i] * b.s[j];<span class="comment">//不妨列个竖式看一看</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; c.len; i++)&#123; </span><br><span class="line">            <span class="comment">//关于进位，与加法意同</span></span><br><span class="line">            c.s[i<span class="number">+1</span>] += c.s[i]/<span class="number">10</span>;</span><br><span class="line">            c.s[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c.<span class="built_in">clean</span>();  <span class="comment">//我们估的位数是a+b的长度和，但可能比它小（1*1 = 1）</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> *= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> * b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> - (<span class="type">const</span> bign &amp;b)&#123;  </span><br><span class="line">    <span class="comment">//对应位相减，加法的进位改为借1</span></span><br><span class="line">        <span class="comment">//不考虑负数</span></span><br><span class="line">        bign c;</span><br><span class="line">        c.len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, g = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="type">int</span> x = s[i] - g;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.len) x -= b.s[i];  <span class="comment">//可能长度不等</span></span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">0</span>) g = <span class="number">0</span>;  <span class="comment">//是否向上移位借1</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                g = <span class="number">1</span>;</span><br><span class="line">                x += <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c.s[c.len++] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> -= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> / (<span class="type">const</span> bign &amp;b) &#123;</span><br><span class="line">    <span class="comment">//运用除是减的本质，不停地减，直到小于被减数</span></span><br><span class="line">        bign c, f = <span class="number">0</span>; <span class="comment">//可能会在使用减法时出现高精度运算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;  </span><br><span class="line">            <span class="comment">//正常顺序，从最高位开始</span></span><br><span class="line">            f = f*<span class="number">10</span>;  <span class="comment">//上面位的剩余到下一位*10</span></span><br><span class="line">            f.s[<span class="number">0</span>] = s[i];  <span class="comment">//加上当前位</span></span><br><span class="line">            <span class="keyword">while</span>(f &gt;= b)&#123;</span><br><span class="line">                f -= b;</span><br><span class="line">                c.s[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c.len = len;  <span class="comment">//估最长位</span></span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> /= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span>  = *<span class="keyword">this</span> / b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> % (<span class="type">const</span> bign &amp;b)&#123;  </span><br><span class="line">    <span class="comment">//取模就是除完剩下的</span></span><br><span class="line">        bign r = *<span class="keyword">this</span> / b;</span><br><span class="line">        r = *<span class="keyword">this</span> - r*b;</span><br><span class="line">        r.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> %= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> % b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> bign &amp;b)&#123; </span><br><span class="line">    <span class="comment">//字符串比较原理</span></span><br><span class="line">        <span class="keyword">if</span>(len != b.len) <span class="keyword">return</span> len &lt; b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>; i != <span class="number">-1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != b.s[i]) <span class="keyword">return</span> s[i] &lt; b.s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> bign &amp;b)&#123;  </span><br><span class="line">    <span class="comment">//同理</span></span><br><span class="line">        <span class="keyword">if</span>(len != b.len) <span class="keyword">return</span> len &gt; b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>; i != <span class="number">-1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != b.s[i]) <span class="keyword">return</span> s[i] &gt; b.s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> &gt; b) &amp;&amp; !(*<span class="keyword">this</span> &lt; b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> == b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &lt; b || *<span class="keyword">this</span> == b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt;= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &gt; b || *<span class="keyword">this</span> == b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">()</span> <span class="type">const</span></span>&#123;  </span><br><span class="line">    <span class="comment">//将结果转化为字符串（用于输出）</span></span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) res = <span class="built_in">char</span>(s[i]+<span class="string">&#x27;0&#x27;</span>)+res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in, bign &amp;x)&#123;</span><br><span class="line"><span class="comment">//重载输入流</span></span><br><span class="line">    string s;</span><br><span class="line">    in &gt;&gt; s;</span><br><span class="line">    x = s.<span class="built_in">c_str</span>();  <span class="comment">//string转化为char[]</span></span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;out, <span class="type">const</span> bign &amp;x)&#123;  </span><br><span class="line"><span class="comment">//重载输出流</span></span><br><span class="line">    out &lt;&lt; x.<span class="built_in">str</span>();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Employ"><a href="#Employ" class="headerlink" title="Employ"></a>Employ</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bign a;<span class="comment">//声明高精度</span></span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line">cout&lt;&lt;a;<span class="comment">//输入输出</span></span><br><span class="line">a=<span class="string">&quot;3333333333333333333333&quot;</span><span class="comment">//初始化    </span></span><br><span class="line"><span class="comment">//其余操作均和整数无异    </span></span><br></pre></td></tr></table></figure><h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><ol><li>该板子使用的时候需要关闭#define int long long</li><li>判断bign类型的数字与常规数字是否相等时，将常规数字转变为字符串类型后与bign.str()进行字符串比较</li></ol>]]></content:encoded>
      
      
      <category domain="http://iokanux.com/categories/XCPC/">XCPC</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E6%A8%A1%E6%9D%BF/">XCPC模板</category>
      
      <category domain="http://iokanux.com/categories/XCPC/XCPC%E6%A8%A1%E6%9D%BF/XCPC%E5%9F%BA%E7%A1%80/">XCPC基础</category>
      
      
      
      <comments>http://iokanux.com/2024/09/07/%E9%AB%98%E7%B2%BE%E5%BA%A6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>前缀和</title>
      <link>http://iokanux.com/2024/09/04/%E5%89%8D%E7%BC%80%E5%92%8C/</link>
      <guid>http://iokanux.com/2024/09/04/%E5%89%8D%E7%BC%80%E5%92%8C/</guid>
      <pubDate>Wed, 04 Sep 2024 10:09:55 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;前缀和&quot;&gt;&lt;a href=&quot;#前缀和&quot; class=&quot;headerlink&quot; title=&quot;前缀和&quot;&gt;&lt;/a&gt;前缀和&lt;/h1&gt;&lt;p&gt;测试一下 &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>测试一下 </p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://iokanux.com/tags/XCPC%E6%A8%A1%E6%9D%BF/">XCPC模板</category>
      
      
      <comments>http://iokanux.com/2024/09/04/%E5%89%8D%E7%BC%80%E5%92%8C/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
