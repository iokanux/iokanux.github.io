<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前缀和</title>
    <url>/2024/09/04/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>测试一下 </p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>XCPC模板</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度</title>
    <url>/2024/09/07/%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
    <content><![CDATA[<p>高精度的封装板子</p>
<span id="more"></span>

<h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p>每个操作的时间复杂度均为O(len)，涉及到两个大数参与的操作时为O(max(len1,len2))</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5005</span>;<span class="comment">//位数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bign</span>&#123;</span><br><span class="line">    <span class="type">int</span> len, s[MAXN];</span><br><span class="line">    <span class="built_in">bign</span> ()&#123;  </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bign</span> (<span class="type">int</span> num) &#123; *<span class="keyword">this</span> = num; &#125;</span><br><span class="line">    <span class="built_in">bign</span> (<span class="type">const</span> <span class="type">char</span> *num) &#123; *<span class="keyword">this</span> = num; &#125;  <span class="comment">//让this指针指向当前字符串</span></span><br><span class="line">    bign <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">int</span> num)&#123;</span><br><span class="line">        <span class="type">char</span> s[MAXN];</span><br><span class="line">        <span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, num);  <span class="comment">//sprintf函数将整型映到字符串中</span></span><br><span class="line">        *<span class="keyword">this</span> = s;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">//再将字符串转到下面字符串转化的函数中</span></span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span> *num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; num[i] == <span class="string">&#x27;0&#x27;</span>; num++) ;  <span class="comment">//去前导0</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) s[i] = num[len-i<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">//反着存</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> + (<span class="type">const</span> bign &amp;b) <span class="type">const</span>&#123; </span><br><span class="line">    <span class="comment">//对应位相加，最为简单</span></span><br><span class="line">        bign c;</span><br><span class="line">        c.len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, g = <span class="number">0</span>; g || i &lt; <span class="built_in">max</span>(len, b.len); i++)&#123;</span><br><span class="line">            <span class="type">int</span> x = g;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len) x += s[i];</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.len) x += b.s[i];</span><br><span class="line">            c.s[c.len++] = x % <span class="number">10</span>;  <span class="comment">//关于加法进位</span></span><br><span class="line">            g = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> += (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="comment">//如上文所说，此类运算符皆如此重载</span></span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="comment">//由于接下来的运算不能确定结果的长度，先大而估之然后再查</span></span><br><span class="line">        <span class="keyword">while</span>(len &gt; <span class="number">1</span> &amp;&amp; !s[len<span class="number">-1</span>]) len--;  <span class="comment">//首位部分‘0’故删除该部分长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> * (<span class="type">const</span> bign &amp;b)&#123; </span><br><span class="line">    <span class="comment">//乘法重载在于列竖式，再将竖式中的数转为抽象，即可看出运算法则。</span></span><br><span class="line">        bign c;</span><br><span class="line">        c.len = len + b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; b.len; j++)&#123;</span><br><span class="line">                c.s[i+j] += s[i] * b.s[j];<span class="comment">//不妨列个竖式看一看</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; c.len; i++)&#123; </span><br><span class="line">            <span class="comment">//关于进位，与加法意同</span></span><br><span class="line">            c.s[i<span class="number">+1</span>] += c.s[i]/<span class="number">10</span>;</span><br><span class="line">            c.s[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c.<span class="built_in">clean</span>();  <span class="comment">//我们估的位数是a+b的长度和，但可能比它小（1*1 = 1）</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> *= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> * b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> - (<span class="type">const</span> bign &amp;b)&#123;  </span><br><span class="line">    <span class="comment">//对应位相减，加法的进位改为借1</span></span><br><span class="line">        <span class="comment">//不考虑负数</span></span><br><span class="line">        bign c;</span><br><span class="line">        c.len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, g = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="type">int</span> x = s[i] - g;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.len) x -= b.s[i];  <span class="comment">//可能长度不等</span></span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">0</span>) g = <span class="number">0</span>;  <span class="comment">//是否向上移位借1</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                g = <span class="number">1</span>;</span><br><span class="line">                x += <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c.s[c.len++] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> -= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> / (<span class="type">const</span> bign &amp;b) &#123;</span><br><span class="line">    <span class="comment">//运用除是减的本质，不停地减，直到小于被减数</span></span><br><span class="line">        bign c, f = <span class="number">0</span>; <span class="comment">//可能会在使用减法时出现高精度运算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;  </span><br><span class="line">            <span class="comment">//正常顺序，从最高位开始</span></span><br><span class="line">            f = f*<span class="number">10</span>;  <span class="comment">//上面位的剩余到下一位*10</span></span><br><span class="line">            f.s[<span class="number">0</span>] = s[i];  <span class="comment">//加上当前位</span></span><br><span class="line">            <span class="keyword">while</span>(f &gt;= b)&#123;</span><br><span class="line">                f -= b;</span><br><span class="line">                c.s[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c.len = len;  <span class="comment">//估最长位</span></span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> /= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span>  = *<span class="keyword">this</span> / b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> % (<span class="type">const</span> bign &amp;b)&#123;  </span><br><span class="line">    <span class="comment">//取模就是除完剩下的</span></span><br><span class="line">        bign r = *<span class="keyword">this</span> / b;</span><br><span class="line">        r = *<span class="keyword">this</span> - r*b;</span><br><span class="line">        r.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    bign <span class="keyword">operator</span> %= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> % b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> bign &amp;b)&#123; </span><br><span class="line">    <span class="comment">//字符串比较原理</span></span><br><span class="line">        <span class="keyword">if</span>(len != b.len) <span class="keyword">return</span> len &lt; b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>; i != <span class="number">-1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != b.s[i]) <span class="keyword">return</span> s[i] &lt; b.s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> bign &amp;b)&#123;  </span><br><span class="line">    <span class="comment">//同理</span></span><br><span class="line">        <span class="keyword">if</span>(len != b.len) <span class="keyword">return</span> len &gt; b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>; i != <span class="number">-1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != b.s[i]) <span class="keyword">return</span> s[i] &gt; b.s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> &gt; b) &amp;&amp; !(*<span class="keyword">this</span> &lt; b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> == b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &lt; b || *<span class="keyword">this</span> == b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt;= (<span class="type">const</span> bign &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &gt; b || *<span class="keyword">this</span> == b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">()</span> <span class="type">const</span></span>&#123;  </span><br><span class="line">    <span class="comment">//将结果转化为字符串（用于输出）</span></span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) res = <span class="built_in">char</span>(s[i]+<span class="string">&#x27;0&#x27;</span>)+res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in, bign &amp;x)&#123;</span><br><span class="line"><span class="comment">//重载输入流</span></span><br><span class="line">    string s;</span><br><span class="line">    in &gt;&gt; s;</span><br><span class="line">    x = s.<span class="built_in">c_str</span>();  <span class="comment">//string转化为char[]</span></span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;out, <span class="type">const</span> bign &amp;x)&#123;  </span><br><span class="line"><span class="comment">//重载输出流</span></span><br><span class="line">    out &lt;&lt; x.<span class="built_in">str</span>();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Employ"><a href="#Employ" class="headerlink" title="Employ"></a>Employ</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bign a;<span class="comment">//声明高精度</span></span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line">cout&lt;&lt;a;<span class="comment">//输入输出</span></span><br><span class="line">a=<span class="string">&quot;3333333333333333333333&quot;</span><span class="comment">//初始化    </span></span><br><span class="line"><span class="comment">//其余操作均和整数无异    </span></span><br></pre></td></tr></table></figure>

<h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><ol>
<li>该板子使用的时候需要关闭#define int long long</li>
<li>判断bign类型的数字与常规数字是否相等时，将常规数字转变为字符串类型后与bign.str()进行字符串比较</li>
</ol>
]]></content>
      <categories>
        <category>XCPC</category>
        <category>XCPC模板</category>
        <category>XCPC基础</category>
      </categories>
  </entry>
</search>
